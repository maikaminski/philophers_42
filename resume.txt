makefile

NAME = philo
CC = cc
FLAGS = -Wall -Werror -Wextra -g
SRC = philo_actions.c philo_close.c philo_init.c philo_main.c \
		philo_monitor.c philo_routine.c philo_utils.c philo_validate.c
OBJS = $(SRC:%.c=%.o)

all: $(NAME)

	
$(NAME): $(OBJS)
	$(CC) $(FLAGS) -o $(NAME) $(OBJS)
	chmod +x $(NAME) 

%.o: %.c
	$(CC) $(FLAGS) -c $< -o $@

clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re 

philo_actions.c

#include "philo.h"

void	take_forks(t_philo *philo);

void	release_forks(t_philo *philo);

void	philo_sleep(t_philo *philo);

void	philo_think(t_philo *philo);

philo_close.c

#include "philo.h"

void	stop_dinner(t_data *data);

void	destroy_mutexes(t_data *data);

void	free_all(t_data *data);

philo_init.c

#include "philo.h"

void	init_data(t_data *data, int argc, char **argv);

void	init_mutex(t_data *data);

void	init_philos(t_data *data);

philo_main.c

#include "philo.h"

int	main(int argc, char **argv)
{
	if (argc < 5 || argc > 6)
		return (error_msg("Invalid number of arguments\n"));
	
}

philo_monitor.c

#include "philo.h"

void	monitor_deaths(t_data *data);

void	has_died(int philo);

void	all_full(t_data *data); 

philo_routine.c

#include "philo.h"

void	start_dinner(t_data *data);

void	*routine(void *arg);

uint64_t	get_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return ((tv.tv_sec * 1000) + (tv.tv_usec / 1000));
}

philo_utils.c

#include "philo.h"

void	safe_print(); // ainda não sei o que colocar nos parametros

int	error_msg(char *msg)
{
	printf("Error: %s", msg);
	return (1);
}

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	return (0);
}

int	ft_atol(const char *nbr)
{
	long	i;
	int		isminus;
	long	res;

	i = 0;
	while (nbr[i] == 32 || (nbr[i] >= 9 && nbr[i] <= 13))
		i++;
	isminus = 1;
	if (nbr[i] == '-' || nbr[i] == '+')
	{
		if (nbr[i] == '-')
			isminus *= -1;
		i++;
	}
	res = 0;
	while (nbr[i] >= '0' && nbr[i] <= '9')
	{
		res = res * 10 + (nbr[i] - '0');
		i++;
	}
	return (res * isminus);
}

philo_validate.c

#include "philo.h"

int	is_number(char *str)
{
	int	i;

	i = 0;
	if (!str || !str[0])
		return (0);
	while (str[i])
	{
		if (str[i] < '0' || str[i] > '9')
			return (0);
		i++;
	}
	return (1);
}

int	validate_args(int argc, char **argv, t_data *data)
{
	int	i;

	i = 1;
	while (i < argc)
	{
		if (!is_number(argv[i]))
			return (error_msg("Invalid input: must be a positive number\n"));
		i++;
	}
	data->philo_number = ft_atol(argv[1]);
	data->time_to_dead = ft_atol(argv[2]);
	data->time_to_eat = ft_atol(argv[3]);
	data->time_to_sleep = ft_atol(argv[4]);
	if (argc == 6)
		data->num_meals = ft_atol(argv[5]);
	else
		data->num_meals = -1;
	if (data->philo_number <= 0 || data->time_to_dead <= 0
		|| data->time_to_eat <= 0 || data->time_to_sleep <= 0
		|| (argc == 6 && data->num_meals <= 0))
		return (error_msg("Values must be above 0.\n"));
	return (0);
}

philo.h

#ifndef PHILO_H
# define PHILO_H

# define FORK "has taken a fork"
# define DIE "died"
# define EAT "is eating"
# define SLEEP "is sleeping"
# define THINK "is thinking"

# include <pthread.h>
# include <stdio.h>
# include <unistd.h>
# include <stdlib.h>
# include <stdint.h>
# include <sys/time.h>
# include <stdbool.h>
# include <limits.h>

typedef struct s_philo
{
	int				philo_id; // id do philosopho
	int				meals_eaten; //contador de refeições
	uint64_t		last_meal; // tempo de quando foi a ultima refeição
	pthread_t		thread_id;	// id da thread
	pthread_mutex_t	*left_fork;
	pthread_mutex_t	*right_fork;
	struct s_data	*data;
}	t_philo;

typedef struct s_data
{
	int					philo_number; //numero de philosophos
	int					num_meals; // número de refeições (caso seja passado como parametro)
	uint64_t			time_to_sleep;
	uint64_t			time_to_eat;
	uint64_t			time_to_think;
	uint64_t			time_to_dead;
	uint64_t			start; //quando começa
	bool				someone_died;
	pthread_mutex_t		*forks; // trava o garfo
	pthread_mutex_t		print; // trava o write
	pthread_mutex_t		lock; // controle de morte
	struct s_philo		*philo;
}	t_data;

int	ft_atol(const char *nbr);
int	error_msg(char *msg);
int	validate_args(int argc, char **argv, t_data *data);

#endif